// src/api/typesRepas.ts
import * as Trace from '../utils/logger';
import { API_BASE } from '../config';
import {
    Unite,
    isAppError,
    CustomAppException,
    Resultat,
    logConsole
} from '@ww/reference'; 

const emoji = "üìè‚Äã‚Äã‚Äã";
const viewLog = false;
const module = "api/unite"; 

/**
 * Charge tous les types de repas disponibles.
 * @returns {Promise<Repas[]>} - Promesse d'un tableau d'objets Repas.
 * @throws Lance une erreur si le chargement des types de repas est en erreur.
 */
export async function uniteCharger (): Promise<Unite[]> {

    Trace.logConsole(viewLog, emoji, module + '/uniteCharger', "DEBUT", "");
    const url = `${API_BASE}/unite`;
    Trace.logConsole(viewLog, emoji, module + '/uniteCharger', 'URL', '${API_BASE}/unite'); 
    try {
        const response = await fetch(url);

        if (!response.ok) {
            const errorData = await response.json(); 
            if (isAppError(errorData)) {
                const retour: Resultat = {
                    success: false,
                    message: "",
                    erreur: errorData
                }
                throw new CustomAppException(retour);
            } else {
                const retour: Resultat = {
                    success: false,
                    message: "Erreur inconnue lors de la lecture des unit√©s."
                }
                throw new CustomAppException(retour);
            }
        }

        return response.json() as Promise<Unite[]>;


    } catch (error) {
        logConsole(viewLog,emoji + " ‚ùå",module + '/initeCharger', 'error', error);
		const message = error instanceof Error ? error.message : String(error);
        const retour: Resultat = {
            success: false,
            message: message,
        }
        throw new CustomAppException(retour);        
    }};
